name: Node.js CI

on: [push, pull_request]

jobs:
  test:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [12.x, 14.x]

    steps:
      - uses: actions/checkout@v2

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      - name: Cache Node Modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node${{ matrix.node-version }}-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}

      - name: Install Frozen Dependencies
        run: npm ci

      - run: xvfb-run -a npm test

  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [12.x, 14.x]

    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      - name: Cache Node Modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node${{ matrix.node-version }}-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}

      - name: Globally Install VSCE
        run: npm install -g vsce

      - name: Install Frozen Dependencies
        run: npm ci

      - run: vsce package

      - name: Upload .vsix artifact
        uses: actions/upload-artifact@v2
        with:
          name: vsix-file
          path: "*.vsix"
        if: startsWith(github.ref, 'refs/tags/')

  deploy-github-releases:
    runs-on: ubuntu-latest

    needs: [build, test]
    if: success() && startsWith(github.ref, 'refs/tags/')

    steps:
      - uses: actions/checkout@v2

      - name: Download .vsix artifact
        id: download_vsix
        uses: actions/download-artifact@v2
        with:
          name: vsix-file

      - name: Set PREREL environment variable
        env:
          TAG: ${{ github.ref }}
        run: echo "PREREL=$(if [[ $TAG =~ "alpha" ]] || [[ $TAG =~ "beta" ]] || [[ $TAG =~ "rc" ]]; then echo "true"; else echo "false"; fi;)" >> $GITHUB_ENV

      - name: Create Modified Release Notes
        run: sed '1,4d' RELEASE_NOTES.md > modded_release_notes.md

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Version ${{ github.ref }}
          body_path: ./modded_release_notes.md
          draft: false
          prerelease: ${{ env.PREREL }}

      - name: Create sanitized github.ref
        run: echo "TAG_USED=$(echo ${GITHUB_REF:10})" >> $GITHUB_ENV

      - name: Upload VSIX Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.download_vsix.outputs.download-path }}
          asset_name: gh-actions-test-vscode-extension-${{ env.TAG_USED }}.vsix
          asset_content_type: application/octet-stream

  deploy-vscode-marketplace:
    name: Release to VSCode Marketplace
    runs-on: ubuntu-latest
    needs: [build, test]
    if: success() && startsWith(github.ref, 'refs/tags/') && !contains(github.ref, 'alpha') && !contains(github.ref, 'beta') && !contains(github.ref, 'rc')

    steps:
      - name: Download VSIX Artifact
        id: download_vsix
        uses: actions/download-artifact@v2
        with:
          name: vsix-file
          path: ${{ github.workspace }}/artifact

      - uses: actions/setup-node@v1
        with:
          node-version: '10.x'

      - name: Install VSCE
        run: npm i -g vsce

      - name: Publish to Marketplace
        run: vsce publish --pat ${{ secrets.VSCE_PUBLISHER_TOKEN }} --packagePath ${{ steps.download_vsix.outputs.download-path }}
